package com.amz;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;

/**
 * TODO
 * @see "https://leetcode.com/problems/minimize-malware-spread-ii/"
 */
public class MinimizeMalwareSpreadII {

    public int minMalwareSpread(int[][] graph, int[] initial) {

        return 0;
    }

    class DSU {
        int[] p, sz;

        DSU(int N) {
            p = new int[N];
            for (int x = 0; x < N; ++x)
                p[x] = x;

            sz = new int[N];
            Arrays.fill(sz, 1);
        }

        public int find(int x) {
            if (p[x] != x)
                p[x] = find(p[x]);
            return p[x];
        }

        public void union(int x, int y) {
            int xr = find(x);
            int yr = find(y);
            p[xr] = yr;
            sz[yr] += sz[xr];
        }

        public int size(int x) {
            return sz[find(x)];
        }
    }

    @Test
    public void check1() {
        String graph = "[[1,1,0],[1,1,0],[0,0,1]]";
        String initial = "[0,1]";
        int expected = 0;
        verify(expected, graph, initial);
    }

    @Test
    public void check2() {
        String graph = "[[1,1,0],[1,1,1],[0,1,1]]";
        String initial = "[0,1]";
        int expected = 1;
        verify(expected, graph, initial);
    }

    @Test
    public void check3() {
        String graph = "[[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]]";
        String initial = "[0,1]";
        int expected = 1;
        verify(expected, graph, initial);
    }

    private void verify(int expected, String graph, String initial) {
        Assertions.assertEquals(expected, minMalwareSpread(Utils.to2dIntMatrix(graph), Utils.stringToIntArray(initial)));
    }

}
