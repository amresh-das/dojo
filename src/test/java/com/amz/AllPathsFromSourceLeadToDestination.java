package com.amz;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.*;

/**
 * @see "https://leetcode.com/problems/all-paths-from-source-lead-to-destination"
 */
public class AllPathsFromSourceLeadToDestination {

    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
        final Map<Integer, List<Integer>> adjacency = new HashMap<>();
        for (int[] edge: edges) {
            adjacency.compute(edge[0], (k, v) -> v == null ? new ArrayList<>() : v).add(edge[1]);
        }
        if (adjacency.containsKey(destination)) return false;
        if (hasCycleOrNonDestinationTerminal(source, new HashSet<>(), adjacency, destination)) {
            return false;
        }
        return true;
    }

    private boolean hasCycleOrNonDestinationTerminal(final int source, final Set<Integer> visited, final Map<Integer, List<Integer>> adjacency, final int destination) {
        if (visited.contains(source)) return true;
        final List<Integer> next = adjacency.get(source);
        if (next == null) {
            return source != destination;
        }
        visited.add(source);
        for (int nxt : next) {
            if(hasCycleOrNonDestinationTerminal(nxt, visited, adjacency, destination)) return true;
        }
        visited.remove(source);
        return false;
    }

    @Test
    public void check1() {
        Assertions.assertEquals(false, leadsToDestination(3, Utils.to2dIntMatrix("[[0,1],[0,2]]"), 0, 2));
    }

    @Test
    public void check2() {
        Assertions.assertEquals(false, leadsToDestination(4, Utils.to2dIntMatrix("[[0,1],[0,3],[1,2],[2,1]]"), 0, 3));
    }

    @Test
    public void check3() {
        final String input = "[[98,0],[0,99],[98,1],[1,99],[98,2],[2,99],[98,3],[3,99],[98,4],[4,99],[98,5],[5,99],[98,6],[6,99],[98,7],[7,99],[98,8],[8,99],[98,9],[9,99],[98,10],[10,99],[98,11],[11,99],[98,12],[12,99],[98,13],[13,99],[98,14],[14,99],[98,15],[15,99],[98,16],[16,99],[98,17],[17,99],[98,18],[18,99],[98,19],[19,99],[98,20],[20,99],[98,21],[21,99],[98,22],[22,99],[98,23],[23,99],[98,24],[24,99],[98,25],[25,99],[98,26],[26,99],[98,27],[27,99],[98,28],[28,99],[98,29],[29,99],[98,30],[30,99],[98,31],[31,99],[98,32],[32,99],[98,33],[33,99],[98,34],[34,99],[98,35],[35,99],[98,36],[36,99],[98,37],[37,99],[98,38],[38,99],[98,39],[39,99],[98,40],[40,99],[98,41],[41,99],[98,42],[42,99],[98,43],[43,99],[98,44],[44,99],[98,45],[45,99],[98,46],[46,99],[98,47],[47,99],[98,48],[48,99],[98,49],[49,99],[98,50],[50,99],[98,51],[51,99],[98,52],[52,99],[98,53],[53,99],[98,54],[54,99],[98,55],[55,99],[98,56],[56,99],[98,57],[57,99],[98,58],[58,99],[98,59],[59,99],[98,60],[60,99],[98,61],[61,99],[98,62],[62,99],[98,63],[63,99],[98,64],[64,99],[98,65],[65,99],[98,66],[66,99],[98,67],[67,99],[98,68],[68,99],[98,69],[69,99],[98,70],[70,99],[98,71],[71,99],[98,72],[72,99],[98,73],[73,99],[98,74],[74,99],[98,75],[75,99],[98,76],[76,99],[98,77],[77,99],[98,78],[78,99],[98,79],[79,99],[98,80],[80,99],[98,81],[81,99],[98,82],[82,99],[98,83],[83,99],[98,84],[84,99],[98,85],[85,99],[98,86],[86,99],[98,87],[87,99],[98,88],[88,99],[98,89],[89,99],[98,90],[90,99],[98,91],[91,99],[98,92],[92,99],[98,93],[93,99],[98,94],[94,99],[98,95],[95,99],[98,96],[96,99],[98,97],[97,99]]";
        Assertions.assertEquals(true, leadsToDestination(100, Utils.to2dIntMatrix(input), 98, 99));
    }

    @Test
    public void check4() {
        Assertions.assertEquals(true, leadsToDestination(4, Utils.to2dIntMatrix("[[0,1],[0,2],[1,3],[2,3]]"), 0, 3));
    }

    @Test
    public void check5() {
        Assertions.assertEquals(false, leadsToDestination(2, Utils.to2dIntMatrix("[[0,1],[1,1]]"), 0, 1));
    }

    @Test
    public void check6() {
        Assertions.assertEquals(true, leadsToDestination(5, Utils.to2dIntMatrix("[[0,1],[0,2],[0,3],[0,3],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]"), 0, 4));
    }

    @Test
    public void check7() {
        String vertices = "[[0,1],[0,2],[1,3],[1,4],[2,3],[2,4],[3,5],[3,6],[4,5],[4,6],[5,7],[5,8],[6,7],[6,8],[7,9],[7,10],[8,9],[8,10],[9,11],[9,12],[10,11],[10,12],[11,13],[11,14],[12,13],[12,14],[13,15],[13,16],[14,15],[14,16],[15,17],[15,18],[16,17],[16,18],[17,19],[17,20],[18,19],[18,20],[19,21],[19,22],[20,21],[20,22],[21,23],[21,24],[22,23],[22,24],[23,25],[23,26],[24,25],[24,26],[25,27],[25,28],[26,27],[26,28],[27,29],[27,30],[28,29],[28,30],[29,31],[29,32],[30,31],[30,32],[31,33],[31,34],[32,33],[32,34],[33,35],[33,36],[34,35],[34,36],[35,37],[35,38],[36,37],[36,38],[37,39],[37,40],[38,39],[38,40],[39,41],[39,42],[40,41],[40,42],[41,43],[41,44],[42,43],[42,44],[43,45],[43,46],[44,45],[44,46],[45,47],[45,48],[46,47],[46,48],[47,49],[47,50],[48,49],[48,50],[49,51],[49,52],[50,51],[50,52],[51,53],[51,54],[52,53],[52,54],[53,55],[53,56],[54,55],[54,56],[55,57],[55,58],[56,57],[56,58],[57,59],[57,60],[58,59],[58,60],[59,61],[59,62],[60,61],[60,62],[61,63],[61,64],[62,63],[62,64],[63,65],[63,66],[64,65],[64,66],[65,67],[65,68],[66,67],[66,68],[67,69],[67,70],[68,69],[68,70],[69,71],[69,72],[70,71],[70,72],[71,73],[71,74],[72,73],[72,74],[73,75],[73,76],[74,75],[74,76],[75,77],[75,78],[76,77],[76,78],[77,79],[77,80],[78,79],[78,80],[79,81],[79,82],[80,81],[80,82],[81,83],[81,84],[82,83],[82,84],[83,85],[83,86],[84,85],[84,86],[85,87],[85,88],[86,87],[86,88],[87,89],[87,90],[88,89],[88,90],[89,91],[89,92],[90,91],[90,92],[91,93],[91,94],[92,93],[92,94],[93,95],[93,96],[94,95],[94,96],[95,97],[95,98],[96,97],[96,98],[97,99],[97,100],[98,99],[98,100],[99,101],[99,102],[101,102]]";
        Assertions.assertEquals(false, leadsToDestination(103, Utils.to2dIntMatrix(vertices), 0, 102));
    }
}
