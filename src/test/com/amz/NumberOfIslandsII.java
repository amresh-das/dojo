package com.amz;

import org.assertj.core.util.Lists;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.stream.Collectors;

/**
 * @see "https://leetcode.com/problems/number-of-islands-ii/"
 */
public class NumberOfIslandsII {
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        final List<Integer> result = new ArrayList<>();
        final Map<Integer, List<Integer>> allIslands = new HashMap<>();
        final Map<Integer, Integer> positionIsland = new HashMap<>();
        for (final int[] position: positions) {
            int key = toKey(position, m, n, 0, 0);
            if (!positionIsland.containsKey(key)) {
                Set<Integer> islands = new HashSet<>();
                islands.add(positionIsland.get(toKey(position, m, n, 1, 0)));
                islands.add(positionIsland.get(toKey(position, m, n, 0, 1)));
                islands.add(positionIsland.get(toKey(position, m, n, -1, 0)));
                islands.add(positionIsland.get(toKey(position, m, n, 0, -1)));
                List<Integer> matching = islands.stream().filter(Objects::nonNull).collect(Collectors.toList());
                if (matching.isEmpty()) {
                    allIslands.put(key, new ArrayList<>());
                    allIslands.get(key).add(key);
                    positionIsland.put(key, key);
                } else {
                    int setId = matching.stream().min(Comparator.comparingInt(i -> i)).get();
                    for (int k : matching) {
                        if (k != setId) {
                            allIslands.get(setId).addAll(allIslands.get(k));
                            allIslands.remove(k);
                        }
                    }
                    allIslands.get(setId).add(key);
                    allIslands.get(setId).forEach(k -> positionIsland.put(k, setId));
                }
            }
            result.add(allIslands.size());
        }
        return result;
    }

    private Integer toKey(int[] position, int m, int n, int iDiff, int jDiff) {
        int i = position[0] + iDiff;
        int j = position[1] + jDiff;
        return i >= 0 && j >=0 && i < m && j < n ? i * n + j : null;
    }

    public List<Integer> numIslands(int m, int n, int[][] positions) {
        final List<Integer> counts = new ArrayList<>(positions.length);
        final Set<Integer> landPositions = new HashSet<>();
        for (int i = 0; i < positions.length; i++) {
            int[] position = positions[i];
            landPositions.add(position[0] * n + position[1]);
            final Set<Integer> visited = new HashSet<>();
            int count = 0;
            for (int p : landPositions) {
                if (!visited.contains(p)) {
                    count++;
                    markVisited(m, n, p / n, p % n, visited, landPositions);
                }
            }
            counts.add(count);
        }
        return counts;
    }

    private void markVisited(final int m, final int n, final int i, final int j, final Set<Integer> visited, final Set<Integer> landPositions) {
        int key = i * n + j;
        if (visited.contains(key)) return;
        if (i < 0 || j < 0 || i >= m || j >= n) return;
        if (landPositions.contains(key)) {
            visited.add(key);
            markVisited(m, n, i + 1, j, visited, landPositions);
            markVisited(m, n, i, j + 1, visited, landPositions);
            markVisited(m, n, i - 1, j, visited, landPositions);
            markVisited(m, n, i, j - 1, visited, landPositions);
        }
    }

    @Test
    public void check1() {
        Assertions.assertEquals(Lists.newArrayList(1,1,2,3), numIslands2(3,3, Utils.to2dIntMatrix("[[0,0],[0,1],[1,2],[2,1]]")));
    }

    @Test
    public void check2() {
        Assertions.assertEquals(Lists.newArrayList(1), numIslands2(1,1, Utils.to2dIntMatrix("[[0,0]]")));
    }

    @Test
    public void check3() {
        Assertions.assertEquals(Lists.newArrayList(1, 2, 1), numIslands2(2,2, Utils.to2dIntMatrix("[[0,0],[1,1],[0,1]]")));
    }

    @Test
    public void check4() {
        String input = "[[95,31],[67,17],[29,31],[44,25],[64,15],[33,8],[67,16],[46,3],[62,16],[53,5],[25,15],[40,9],[69,0],[95,19],[48,27],[65,8],[44,8],[25,4],[9,2],[85,29],[54,2],[30,15],[47,26],[79,31],[56,3],[73,11],[15,18],[45,22],[41,25],[30,6],[12,1],[65,19],[16,17],[74,11],[42,7],[54,0],[81,1],[17,7],[57,24],[47,23],[49,27],[32,2],[22,24],[86,22],[32,16],[88,25],[72,21],[6,1],[3,3],[44,20],[44,2],[88,6],[93,6],[64,13],[51,17],[97,5],[38,3],[64,22],[90,31],[56,18],[20,2],[22,31],[82,12],[20,29],[35,18],[80,26],[24,2],[33,22],[35,31],[21,12],[58,15],[12,31],[30,29],[8,29],[54,29],[89,27],[17,2],[57,6],[93,22],[15,30],[31,29],[42,27],[7,21],[40,19],[28,4],[79,8],[60,18],[26,6],[9,14],[93,19],[16,16],[51,7],[89,22],[69,20],[8,19],[82,18],[9,30],[86,16],[71,18],[70,0],[4,8],[16,12],[75,24],[59,17],[7,17],[19,14],[89,26],[49,31],[89,16],[82,2],[72,18],[29,2],[80,2],[0,15],[96,1],[75,10],[75,8],[78,26],[82,19],[7,13],[7,29],[23,27],[42,5],[83,12],[26,3],[14,3],[93,4],[97,8],[45,19],[12,4],[42,14],[82,26],[1,31],[40,24],[97,4],[60,9],[90,25],[55,2],[20,5],[96,7],[38,29],[32,29],[80,25],[21,9],[44,29],[53,10],[67,24],[28,23],[16,30],[89,6],[79,19],[48,17],[34,20],[83,7],[68,7],[63,8],[34,23],[15,9],[85,21],[47,14],[88,4],[25,11],[77,9],[70,29],[36,3],[98,3],[62,1],[48,10],[15,11],[60,5],[38,26],[98,0],[45,23],[16,23],[11,11],[46,26],[59,10],[30,16],[36,22],[25,16],[71,14],[2,12],[57,9],[86,14],[90,13],[92,22],[82,15],[31,12],[94,7],[51,22],[40,4],[55,7],[76,9],[89,30],[85,6],[88,0],[65,26],[85,26],[57,18],[58,26],[56,15],[64,10],[68,29],[30,23],[34,28],[80,23],[83,2],[83,0],[64,18],[42,1],[27,7],[88,15],[68,17],[69,2],[59,11],[61,8],[81,20],[33,11],[1,25],[51,20],[92,11],[88,10],[14,8],[66,31],[30,20],[39,29],[47,3],[65,21],[15,14],[44,24],[14,30],[83,25],[82,17],[87,20],[67,9],[0,0],[78,11],[45,2],[23,2],[70,2],[98,1],[53,0],[90,22],[18,28],[97,28],[80,28],[70,1],[62,14],[97,29],[90,21],[85,27],[10,1],[31,3],[63,27],[94,5],[91,29],[42,4],[88,19],[95,13],[84,28],[38,4],[12,15],[86,6],[50,9],[64,24],[83,20],[45,31],[0,24],[20,21],[68,18],[60,30],[18,1],[0,21],[98,14],[15,0],[44,22],[8,11],[15,16],[4,29],[21,2],[38,1],[76,22],[6,13],[13,28],[31,2],[10,24],[84,24],[20,14],[52,27],[46,4],[43,2],[95,0],[66,12],[45,16],[39,10],[3,16],[5,16],[48,2],[85,24],[66,4],[98,9],[24,13],[88,22],[86,20],[23,22],[34,5],[16,6],[25,27],[50,7],[23,28],[5,29],[10,6],[70,13],[29,17],[38,25],[46,9],[87,14],[94,2],[14,19],[98,21],[77,14],[9,1],[33,12],[66,8],[69,8],[89,29],[20,6],[57,20],[2,30],[46,18],[98,30],[70,18],[33,2],[51,28],[30,25],[24,22],[17,18],[19,4],[49,30],[89,12],[43,18],[27,25],[9,8],[88,12],[47,7],[63,4],[4,15],[20,25],[16,21],[49,1],[32,25],[78,24],[70,10],[28,30],[51,29],[98,22],[55,13],[50,15],[70,24],[48,15],[54,13],[46,8],[28,8],[21,17],[5,22],[55,26],[0,1],[43,30],[69,31],[50,29],[27,24],[74,22],[93,28],[3,5],[1,8],[63,24],[11,27],[95,11],[79,3],[19,23],[49,28],[49,24],[57,21],[26,13],[14,7],[94,29],[39,15],[95,5],[69,12],[91,17],[33,25],[17,11],[4,3],[34,31],[21,10],[37,28],[77,22],[48,22],[39,30],[59,14],[69,3],[91,27],[90,27],[84,3],[87,28],[35,10],[92,29],[63,1],[88,3],[48,13],[5,3],[76,27],[91,19],[97,30],[62,30],[78,29],[2,26],[47,15],[4,27],[50,23],[3,26],[13,25],[63,13],[55,19],[33,3],[43,7],[49,18],[89,25],[57,25],[80,13],[70,11],[50,6],[55,27],[67,22],[43,11],[75,14],[69,28],[7,24],[46,12],[35,24],[26,22],[97,3],[0,10],[27,20],[8,8],[37,2],[28,2],[25,21],[41,9],[92,25],[46,11],[9,0],[91,4],[78,22],[94,12],[10,26],[9,7],[91,13],[11,31],[61,5],[46,29],[20,7],[25,3],[59,21],[89,18],[47,30],[73,13],[33,26],[1,16],[66,25],[3,15],[5,4],[49,7],[18,30],[66,26],[25,30],[73,31],[22,22],[87,0],[95,20],[97,20],[69,17],[48,30],[66,5],[24,10],[54,12],[17,9],[44,31],[49,6],[51,15],[82,21],[72,28],[64,12],[87,19],[69,1],[98,4],[29,9],[70,17],[66,24],[93,5],[71,24],[95,27],[22,23],[83,15],[35,27],[86,17],[36,28],[25,19],[16,13],[46,28],[61,20],[93,16],[8,0],[24,5],[32,22],[22,15],[73,15],[69,23],[80,14],[80,20],[18,3],[38,15],[45,30],[3,24],[31,0],[86,3],[10,5],[63,2],[34,14],[12,11],[2,23],[49,16],[64,17],[94,26],[41,18],[12,14],[67,20],[17,17],[92,2],[30,24],[42,9],[35,3],[91,18],[18,13],[21,19],[77,27],[76,31],[64,2],[95,3],[91,7],[63,9],[38,2],[70,25],[79,4],[44,14],[29,20],[61,0],[40,29],[63,21],[56,4],[92,3],[80,24],[23,3],[13,19],[82,25],[65,22],[4,2],[28,6],[47,18],[67,31],[61,9],[80,21],[65,15],[82,27],[19,29],[38,21],[33,30],[53,14],[56,24],[5,19],[81,11],[67,28],[92,15],[8,16],[90,11],[68,30],[27,30],[65,24],[84,6],[27,0],[95,1],[87,30],[78,13],[84,21],[10,28],[76,0],[17,23],[61,17],[52,17],[6,28],[5,21],[8,21],[86,4],[36,20],[38,20],[51,4],[31,28],[78,7],[19,27],[74,17],[1,5],[54,21],[13,7],[52,29],[52,3],[88,14],[1,13],[87,17],[59,9],[23,20],[3,11],[72,6],[86,2],[37,12],[35,5],[96,30],[11,8],[37,27],[76,7],[39,2],[4,25],[28,14],[43,22],[96,5],[94,15],[48,21],[81,16],[24,29],[60,2],[43,21],[58,24],[21,23],[67,26],[30,1],[83,30],[2,7],[68,22],[24,14],[39,31],[86,18],[27,1],[63,25],[56,16],[72,12],[33,24],[32,7],[15,6],[74,5],[25,17],[13,16],[35,1],[56,17],[48,20],[57,23],[34,7],[83,14],[83,3],[3,30],[85,11],[90,15],[56,30],[14,9],[72,22],[17,13]]";
        Assertions.assertEquals(Lists.newArrayList(1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 86, 87, 88, 89, 90, 91, 92, 93, 94, 94, 95, 96, 97, 98, 99, 100, 100, 101, 102, 103, 103, 104, 105, 106, 107, 108, 109, 110, 110, 111, 111, 112, 113, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 123, 124, 125, 125, 126, 127, 128, 128, 128, 129, 130, 131, 132, 133, 133, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 155, 156, 157, 157, 158, 158, 159, 159, 160, 161, 162, 163, 164, 164, 165, 166, 167, 168, 169, 170, 170, 171, 172, 173, 174, 175, 175, 176, 177, 178, 179, 180, 181, 182, 182, 183, 184, 185, 186, 187, 187, 188, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 198, 198, 199, 200, 200, 200, 201, 201, 202, 203, 204, 205, 205, 205, 205, 205, 205, 205, 206, 207, 208, 207, 208, 208, 208, 208, 209, 210, 211, 212, 213, 213, 214, 215, 216, 216, 217, 217, 218, 219, 220, 221, 222, 223, 223, 224, 225, 226, 227, 228, 228, 229, 229, 230, 230, 231, 232, 232, 233, 232, 233, 234, 234, 235, 235, 235, 236, 237, 238, 239, 240, 241, 242, 242, 243, 244, 245, 245, 245, 246, 247, 248, 249, 249, 249, 249, 250, 251, 252, 252, 253, 253, 254, 255, 256, 257, 256, 256, 256, 257, 257, 257, 258, 259, 260, 261, 261, 261, 262, 263, 263, 264, 265, 265, 266, 267, 268, 269, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 279, 279, 280, 281, 282, 283, 283, 283, 284, 285, 286, 287, 287, 288, 289, 289, 289, 290, 291, 292, 293, 293, 294, 295, 296, 297, 297, 298, 298, 299, 299, 300, 301, 301, 302, 303, 303, 304, 304, 304, 304, 305, 305, 306, 306, 307, 307, 308, 307, 308, 309, 310, 310, 310, 310, 311, 311, 312, 313, 312, 313, 314, 315, 314, 315, 316, 316, 317, 317, 318, 318, 318, 319, 317, 317, 318, 318, 318, 318, 319, 320, 321, 322, 323, 324, 325, 326, 325, 326, 327, 327, 328, 328, 329, 329, 330, 330, 330, 331, 331, 332, 333, 333, 333, 333, 333, 334, 334, 333, 334, 335, 336, 337, 337, 338, 339, 338, 338, 338, 339, 338, 339, 340, 340, 340, 340, 341, 341, 340, 340, 341, 341, 342, 342, 342, 342, 343, 344, 344, 343, 343, 343, 344, 343, 342, 340, 340, 341, 340, 340, 341, 341, 341, 342, 342, 342, 343, 344, 344, 345, 345, 346, 347, 348, 348, 348, 349, 349, 349, 350, 351, 352, 352, 352, 353, 353, 354, 355, 355, 356, 357, 357, 358, 357, 358, 357, 357, 357, 356, 357, 358, 358, 359, 359, 360, 361, 361, 359, 359, 359, 360, 360, 361, 361, 362, 362, 362, 361, 361, 361, 360, 359, 359, 360, 360, 360, 359, 359, 359, 359, 359, 360, 361, 362, 362, 363, 364, 365, 366, 367, 368, 368, 368, 367, 367, 368, 367, 368, 369, 369, 370, 371, 371, 372, 372, 373, 373, 373, 373, 374, 374, 375, 375, 376, 377, 378, 379, 380, 380, 380, 381, 380, 381, 381, 380, 381, 382, 383, 383, 384, 384, 384, 385, 385, 386, 386, 387, 388, 388, 387, 388, 388, 389, 390, 391, 391, 391, 391, 391, 392, 393, 394, 394, 394, 394, 394, 394, 394, 394, 395, 395, 396, 396, 397, 397, 398, 399, 398, 398, 398, 399, 399, 398, 398, 399, 400, 401, 400, 400, 399), numIslands2(99,32, Utils.to2dIntMatrix(input)));
    }

    @Test
    public void check5() {
        String input = "[[0,1],[1,2],[2,1],[1,0],[0,2],[0,0],[1,1]]";
        Assertions.assertEquals(Lists.newArrayList(1,2,3,4,3,2,1), numIslands2(3,3, Utils.to2dIntMatrix(input)));
    }

    @Test
    public void check6() {
        String input = "[[0,0],[0,1],[1,2],[2,1],[1,0],[0,0],[2,2],[1,2],[1,1],[0,1]]";
        Assertions.assertEquals(Lists.newArrayList(1, 1, 2, 3, 3, 2, 1), numIslands2(3,3, Utils.to2dIntMatrix(input)));
    }

}
